Javascript er dårlig  5 min
  Det ble utviklet for å få apen til å danse
    * klikk på ape, den danser
  Det har mange feil og uforutsett oppførsel som vi må jobbe oss rundt
    * typeof {} // "object"
    * typeof [] // "object"
    * typeof (new function(){}) // "object"
  Internet er fullt av dårlige løsninger
    * memoize funksjon er tregere enn brute force

  JavaScript er for de evneveike som ikke klarer å kode Java™
  Mitt navn er Kent Andersen, jeg er en JavaScript-utvikler og i dag skal vi snakke om å bygge stor applikasjoner i JavaScript

  Heldigvis har ting forandret seg. Flike folk bygger bra i JavaScript.
    * Goolge docks
    * Google maps
    (kanskje finne et eksempel som ikke er google)

  Men de fleste feil og magler er det fortsatt med oss.
  Språket har ingen struktur eller rettesnor bygget inn.
  Heldigvis har vi rammeverk for å tette gapet. Derfor finnes det like mange mvc-rammeverk som det er gram masse på jorden
    * todoMVC
    * til referanse er det 56 milliard ipv6 pr gram masse, så vi har litt å gå på(https://pthree.org/2009/03/08/the-sheer-size-of-ipv6/#comment-116385)

  Da er det bare å laste inn ReactJS, skriv en masse kode, vent på at money starts pouring


Applikasjonsstruktur 5min
  Alle som har startet et prosjekt, uahengig av språk, med kun tanken om at «hvis jeg følger best practice, så vil alle problemer løses». Har tidlig oppdaget at det er ting du trenger å gjøre, som rammeverket-utviklerene ikke har tenkt på

  Derfor skal vi se hvordan bygge applikasjoner, og hvordan håndtere at de vokser.

  Hvis vi ser tilbake 2000 år. Let Me Be Your Father X-mas med Boyzvoice toppet vglista. Og bekk.no så slik ut (TODO: finn et bilde fra 2000)

  Nettet var statiske greier. Last side, trykk en link, last en ny side. Server hadde full konroll, og veldig skjedde på fremsiden.

  Så spoler vi frem til 2010, året jeg var ferdig på skolen. Vi begynnt leke med det vi i dag kaller Single page applications.
  Trender er alltid interssant; Når vi begynner å bli lei bikker det alltid over på andre siden.
    * 70 talls slengbukse - 80 talls tightfit
    * 90 talls bootcut - 2000 talls tightfit

  Det samme finner vi i software. Vi gikk fra å levere all markup fra server, til å bygge all markup i JavaScript.
  En stund var det veldig kult, helt til vi begynte å se på lastetider. Hvor lang tid bruker vi på å få innhold opp på skjermen. Du må laste ned all CSS, all JS, parse, kjøre også rendre.

  I tillegg brakk vi det som grunnleggende på  webben, å kunne linke mellom sider. Nå har store webrammeverk gjort en ganske god jobb med å brekke lenking allerede.
    * «Dette er en url»
    * app state
    * post back
    * hidden fields

  Det single page application virkelig banet veien for var skille mellom backend og fronend.
    * Enderlig var frontend frisluppet fra postback og appstate rammeverk
    * Java-utviklere kunne se Backend - rest - {tullete frontend hipster greier}
    * JavaScriptutviklere kunne se {tullete backend hipster greier} - rest - fronend
    * Disse to områdene kan utvikle seg uavhengig


Vurderinger 5min
  Uavhengig er et stikkord. Hvis vi skal utvikle frontend i vår applikasjon i den rettningen _vi_ vil; er det viktig fjerne avhengigheter til større webrammeverk. Jeg er også av den oppfattningen at CMS integrasjon somregel gjør mer skade enn nytte mtp skape spennende tjenester på nettet. Men dette er tema for en helt egen talk.

  Ved å isoloere frontend fra backend kan vi ta avgjørelser på bakgrunn av hva som er best for frontend.
  Jøran Lillesand og Stian Mathiassen holdt et ginstrende foredrag tidligere om «Micro Services i Posten». Hvis dere ikke så det, så anbefaler jeg dere å se det når videoene blir tilgjengelige.
  Ved å behandle frontend som en microservice oppnår vi isolasjon, som burde være fornuftig mtp på at de har helt forskjellige endringstakt og krav til test.

  Nå som vi har skillt oss fra backend er allt bare fryd og gammen. Vi kan gjøre hva vi vil
  Det er litt som å flytte hjemmefra, du kan spise posesuppe og være oppe hele natta, men det ikke en tilværelse du kan være i særlig lenge. Selv med helt frie tøyler, trenger vi struktur (kanskje mer enn før)

  Det er her det fleste av oss tyr til rammeverk. Det er helt greit og i mange tilfeller et riktig valg. Det er ikke noe poeng å finne opp hjulet på nytt, og du vil uansett ende opp med et rammeverk, om du laster ned noe ferdig eller koder det selv.

  Rammeverk kommer å går.
  stjel litt herfra: http://blog.bitovi.com/longevity-or-lack-thereof-in-javascript-frameworks/

  Det er helt urealistisk å tro at valg vi tar i dag vil være like riktige om 2-5år. Derfor mener jeg det er viktigere å rigge infrastrukturen slik at vi _kan_ den dagen det er nødvendig.

  Hvis vi igjen ser på arkitekturdiagrammet, backend penkt brukket opp i små biter, mens frontend er en diger klump på tvers av hele tjenesteomrdet. Den minner litt om en gammel kjenning
    * Weblogic portal
    * bilde av monulitt

  Alle som har jobbet med en moulittisk arkitektur vet hvor vanskelig det er å migrere. Jo mer knyttet du er til et rammeverk jo mer tid vil det ta å skrive seg vekk.
  Derfor foreslår jeg å brekke frontend også opp i mindre biter og lage flere single page applikasjoner
    * Ikke så små at vi ender opp med arktekturen
    * store nok at det gir verdi

  Når du navigerer fra et tjenesteområde til et annet vil vi laste siden på nytt, (akkurat som i 99).
  «Er det farlig med page refresh». Ser vi på applikasjonene som vi bruker hver dag, har flere av de sidelast mellom for hvert navigasjonssteg
    * github
    * ...

  Ved å segmentere hver frontend applikasjon kan en bruke en helt annen teknologi enn de andre. Skulle det vise seg at en teknologi var bedre enn den andre så er det mulig å migrere app for app, ikke en masse risiko - big bang release.

  Vi tok det også enda et steg lenger. Hvilke cross cutting elementer har vi, som skal være identisk på alle sider. Meny fotter kontooversikt og trakk de inn i appen som dependecies.
  Det er vesentlig å merke seg at vi trakk elementene inn i applikasjonen, ikke applikasjonen inn i et rammeverk. Det er en enkel grunn til det.
    * Hver applikasjon skal kunne kjøres isolert
    * Ikke noe av noen avhengigheter til felle rammeverk på tvers runtime (uten versjonering)
    * En endring i X skal ikke ødelegge for Y


Ytelse 10min
  Play while downloading
  http://www.pocket-lint.com/news/122405-xbox-one-will-let-users-play-games-while-downloading-like-the-ps4
  Det er jo hærlig! Web har hatt denne funksjonen siden begynnelsen
    * laste video
    * laste stort dokument

  Browsere parser alt innhold sekvensielt og vil starte å rendre så fort data har begynt å komme.
  [Det er derfor vi anfalte å sette høyde og bredde på bilder for å unngå reflow av siden.]
    * dns lookup
      * It’s important to understand that this is on a per server basis. Using multiple domain names, such as 1.mydomain.com, 2.mydomain.com, 3.mydomain.com, etc., allows a web developer to achieve a multiple of the per server connection limit. This works even if all the domain names are CNAMEs to the same IP address.
    * parse css
    * laste javascript
    * kjøre javascript

  Jeg har hørt dette argumentet i når vi snakker om lastetid.
  «Dette er mer en app enn en webside, så mine brukere kan vente de ekstra 20 sekundene det tar å laste»,
  All forskning tilsier at du ikke har 20 sekunder. Du har kanskje ikke 2 en gang. Tabell om brukeropplevse i forhold til venting.  «Brukere blir lei etter 2 sekunder og mange gir opp etter 6»

  Det beste måten å forbedre lastetiden er Fjern kode!
  Ofte når man skal lage en webapp, så trekker man inn toolkiten man er vant med. jQuery, underscore, backbone, angualr react. Som klokker inn på 200kb. Og alt du trenger dem til er å laste en resurs når noen klikker på en knapp.
    * http://youmightnotneedjquery.com/
    * https://www.reindex.io/blog/you-might-not-need-underscore/
    * ES6 classes
  Disse resursene beviser egentlig bare at nettleserene har så mye varktøy innbygget at du trenger ikke laste utilities lenger. Missforstå meg ikke; i mange tilfeller gir 200kb masse verdi videre i applikasjonen. Men min erfaring er at mange prematurt trekker inn biblioteker.

  Det er derfor gi deg selv et lastetids budsjett definere hva som er en ferdig lastet side.
    * Over folden
    * first interaction
    * stjel litt herfra: https://speakerdeck.com/patrickhamann/css-and-the-critical-path

  Hvilken rekkefølge vi laster er også viktig
    * Parseren treffer en css link, vil parsing av dokumentet stoppe til css-en er ferdig lastet. Hvis cssen er tung, så vil hele siden din fryse til den er ferdig
    * javascript oppfører seg også likt. Men i tillegg vil den kjøre scriptet
      * script som blocker vil låse siden.
      * async flagg vil forhindre låsing og laste / kjøre javascript når den har tid. Kjempefint, non-blocking! Ikke helt. Hvis du har avhengigheter, feks jquyer, som tar lenger tind å laste enn ditt script, så vil scriptet ditt kjøre før jquyer er ferdig lastet.
      Resultatet er masse referance errors.
      Du kan skrive kode som passer på at biblioteket er lastet, og hvis det ikke er lastet, legger på en onload event, slik at det blir kjørt når det er ferdig lastet.
    *brekke opp i flere script

  Som et siste prikk over i-en, trenger vi ikke å vente unødvendig. Så lenge vi ikke har avhengigheter til deler av siden som ikke er lastet, er det ingen grunn til å vente på DOMContentLoaded ($(document).ready()) eventen.


  preparser
  Blocking av UI-tråden


Verktøy 5min
  «the fastes request is the one you don't have to make»

  Derfor har vi en gammel venn, browser cache
  Han er skikkelig arbeidsvillig, men ikke spessielt smart.
  Hvis du gir han en oppgave, spørr han hvordan det skal gjøres. Gir du han en lik oppgave, så spørr han han en gang til.
  Og det er greit, for hvis han skulle gjøre det på egen hånd blir det alltid kaos.

  For å herske over browser cachen har vi to verktøy. header og addresse. Du kan sette Cache-Control: max-age=231321423 (i sekunder). Men det vil si at brukere som laster siden et sekund før du oppdaterer vil måtte vente hele max-age tiden har løpt ut.

  Derfor har vi egentlig bare addresse å jobbe med. Endrer du en en bokstav i urlen, inkludert query parameter, så invalideres cachen og filen lastes på nytt.

  Går vi tilbake til applikasjonen vår, en app.js og en app.css. Skal vi endre en linje i app.js. må vi endre adressen, invalidere cachen, og hele filen lastes på nytt. Alle 300 kb

  Derfor begynte jeg å se på, hvordan unngå at det som skjelden endrer seg må lastes pga det som ofte endrer seg.

  Ser vi på anatomien til en applikasjon så får vi dette.
    * 3parts biblioteker og rammeverk; jquery, underscore, backbone etc
    * meny og andre elementer som er tilgjengelig på alle sider
    * egenutviklete widgets og delt kode som brukes noen steder
    * helt unik applikasjonskode

  her har vi flere grupper som nesten aldri endrer seg. Og de står for typisk 80% av størrelsen? Kan vi segmentere applikasjonen slik at denne delen ikke blir invalidert.

  Derfor har vi skilt mellom rammeverk, felleskode, og applikasjonskode. Dermed kan applikasjonskoden endres daglig, uten at hele rammeverket må lastes ned.
  Når vi skal oppdatere endten applikasjons-koden eller rammeverks-koden endrer vi filnavnet og nettleseren laster ned den nye versjon.

  Blir rammeverkspakkene flyttet til felles ressurs, på tvers av alle applikasjonene, så kan koden hentes fra cache også når brukeren navigerer mellom forskjellige applikasjoner.

  Skulle en applikasjon trenge endringer i rammeverkskoden, lager vi bare en ny versjon og legger den paralellt med den eksisterende og oppdatere den ene. Fordelen er at vi kan ha apper peke på forskjellige versjoner, og på den måten unngå en tvungen oppgradering på tvers. I praksis er det ikke ideelt å ha mange versjoner i spill samtidig. Men å ha fleksibiliten til å oppgradere enkeltapper gjør at vi kan være råere med refaktorering av rammeverkskode.


Kodehåndtverk 10min
  Browserify - externals
  Widgets
  Moduler
  Abstrakter
  Arv - object composition (mixins)
  Routing (internt i SPA)
  Løst koblet frontend
  One way dataflow
  Orchestrator pattern
  Filstruktur (moduler)


Konkluksjon 5min
  Nå har vi vært gjennom en masse stoff. Alt fra de store linjene, til detaljer omkring implementasjonen.
  Hvis vi starter med det store får vi mest igjen for investeringen
  «Det gir mye mer verdi å levere funksjonalitet ofte og uten risiko, enn om vi venter på DOMContentLoaded»



